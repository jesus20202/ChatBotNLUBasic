🤖 PROMPT COMPLETO - Chat IA con Recomendaciones para DataBot
📋 CONTEXTO DEL PROYECTO
Objetivo: Desarrollar un chat en tiempo real con IA que consulte base de datos para recomendaciones y categorización, como demostración para postulación a puesto backend junior en DataBot (empresa chilena).
Requisitos técnicos:

API Ollama 3-8B ya funcional en Hugging Face
Base de datos en Render (PostgreSQL)
Chat en tiempo real con WebSockets
Sistema NLU integrado
Desplegable en servicios gratuitos

🏗️ ARQUITECTURA TÉCNICA
Stack Tecnológico
Backend: FastAPI + WebSockets + SQLAlchemy
Frontend: Jinja2 templates + HTML/CSS/JS vanilla
Base de datos: PostgreSQL (Render)
IA: Ollama 3-8B via Hugging Face API
Despliegue: Render (todo en uno)
Flujo del Sistema
Usuario → NLU (intención, entidad) → Consulta BD → Contexto/Prompt → LLM → Respuesta → WebSocket → Registro DB
🗄️ ESQUEMA DE BASE DE DATOS
1. productos
sqlCREATE TABLE productos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    categoria_id INTEGER REFERENCES categorias(id),
    precio DECIMAL(10,2) NOT NULL,
    descripcion TEXT,
    marca VARCHAR(100),
    stock INTEGER DEFAULT 0,
    activo BOOLEAN DEFAULT TRUE,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
2. categorias
sqlCREATE TABLE categorias (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL UNIQUE,
    descripcion TEXT,
    categoria_padre_id INTEGER REFERENCES categorias(id),
    activo BOOLEAN DEFAULT TRUE
);
3. usuarios_sesiones
sqlCREATE TABLE usuarios_sesiones (
    id SERIAL PRIMARY KEY,
    session_id VARCHAR(255) UNIQUE NOT NULL,
    ip_address INET,
    user_agent TEXT,
    fecha_inicio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_ultimo_acceso TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activo BOOLEAN DEFAULT TRUE
);
4. conversaciones
sqlCREATE TABLE conversaciones (
    id SERIAL PRIMARY KEY,
    session_id VARCHAR(255) REFERENCES usuarios_sesiones(session_id),
    mensaje_usuario TEXT NOT NULL,
    respuesta_bot TEXT NOT NULL,
    intencion_detectada VARCHAR(100),
    entidades_extraidas JSONB,
    contexto_bd JSONB,
    tiempo_respuesta_ms INTEGER,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
5. intenciones_detectadas
sqlCREATE TABLE intenciones_detectadas (
    id SERIAL PRIMARY KEY,
    session_id VARCHAR(255) REFERENCES usuarios_sesiones(session_id),
    intencion VARCHAR(100) NOT NULL,
    confianza DECIMAL(3,2),
    entidades JSONB,
    mensaje_original TEXT,
    productos_consultados JSONB,
    resultado_exitoso BOOLEAN,
    fecha_deteccion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
🧠 SISTEMA NLU
Intenciones a Detectar

buscar_producto: Usuario busca producto específico
recomendar_categoria: Pide recomendaciones por categoría
comparar_precios: Quiere comparar precios
info_producto: Solicita información detallada
saludo: Interacción inicial
ayuda: Solicita ayuda o no entiende

Entidades a Extraer

marca: Marca del producto
categoria: Categoría de producto
rango_precio: Rango de precios (min-max)
caracteristicas: Características específicas

🏗️ ESTRUCTURA DEL PROYECTO
/app
├── main.py (FastAPI app + WebSocket endpoints)
├── models/
│   ├── __init__.py
│   ├── database.py (SQLAlchemy models)
│   └── schemas.py (Pydantic models)
├── nlu/
│   ├── __init__.py
│   ├── intent_classifier.py (detección intenciones)
│   └── entity_extractor.py (extracción entidades)
├── database/
│   ├── __init__.py
│   ├── connection.py (configuración DB)
│   └── queries.py (consultas específicas)
├── llm/
│   ├── __init__.py
│   ├── ollama_client.py (integración Hugging Face)
│   └── prompt_builder.py (construcción contexto)
├── websocket/
│   ├── __init__.py
│   └── manager.py (manejo conexiones WebSocket)
├── templates/
│   ├── index.html (chat interface)
│   └── dashboard.html (métricas - opcional)
├── static/
│   ├── css/style.css
│   └── js/chat.js
└── requirements.txt
🎯 FUNCIONALIDADES CLAVE
1. Chat en Tiempo Real

Interface web limpia y responsive
WebSockets para mensajería instantánea
Indicadores de "escribiendo..."
Historial de conversación

2. Procesamiento NLU

Detección automática de intenciones
Extracción de entidades relevantes
Confidence scoring para cada detección
Fallback para intenciones no reconocidas

3. Consultas Inteligentes a BD

Queries dinámicas basadas en intenciones
Filtros por categoría, precio, marca
Recomendaciones basadas en similaridad
Manejo de resultados vacíos

4. Integración LLM

Construcción de prompts contextualizados
Respuestas naturales con datos específicos
Manejo de errores de API
Optimización de tokens

5. Logging y Métricas

Registro completo de conversaciones
Análisis de intenciones detectadas
Métricas de tiempo de respuesta
Tracking de sesiones anónimas

🚀 PLAN DE DESARROLLO
Fase 1: Setup Base

Configurar FastAPI con WebSockets
Conectar base de datos PostgreSQL
Crear modelos SQLAlchemy
Interface básica de chat

Fase 2: NLU Core

Implementar clasificador de intenciones
Extractor de entidades
Sistema de confidence scoring
Testing con casos de uso

Fase 3: Integración BD

Queries dinámicas por intención
Sistema de recomendaciones
Filtros y búsquedas avanzadas
Manejo de casos edge

Fase 4: LLM Integration

Cliente para API Ollama
Constructor de prompts contextualizados
Procesamiento de respuestas
Manejo de errores

Fase 5: Producción

Logging completo
Métricas y dashboard
Optimización de performance
Despliegue en Render

🔧 CONFIGURACIÓN TÉCNICA
Variables de Entorno
DATABASE_URL=postgresql://user:pass@host:port/db
OLLAMA_API_URL=https://api-inference.huggingface.co/models/your-model
OLLAMA_API_KEY=your-huggingface-token
DEBUG=True
Dependencias Principales
fastapi
uvicorn
websockets
sqlalchemy
psycopg2-binary
pydantic
jinja2
aiofiles
httpx
python-multipart
🎯 PUNTOS CLAVE PARA IMPRESIONAR

Sistema NLU personalizado (no solo RAG básico)
Métricas y logging detallado
Arquitectura escalable y limpia
Integración completa IA + BD + Frontend
Código documentado y profesional
Demo funcional en producción